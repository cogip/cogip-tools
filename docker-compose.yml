x-vol-run: &vol-run
  "run:/var/run/cogip"

x-vol-dev: &vol-dev
  "/dev:/dev"

x-vol-vscode: &vol-vscode
  "vscode:/root/.vscode-server"

x-volumes-common: &volumes-common
  volumes:
    - *vol-run
    - *vol-dev
    - *vol-vscode
    - "build_cache:/src/build"
    - "./assets:/src/assets"
    - "/tmp/.X11-unix/:/tmp/.X11-unix/"
    - "$XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR"

x-extra-hosts-common: &extra-hosts-common
  extra_hosts:
    host.docker.internal: host-gateway

x-watch-pyproject: &watch-pyproject
  path: ./pyproject.toml
  action: sync+restart
  target: /src/pyproject.toml

x-watch-python: &watch-python
  path: ./cogip
  action: sync
  target: /src/cogip

x-watch-cpp: &watch-cpp
  path: ./cogip/cpp
  action: sync+restart
  target: /src/cogip/cpp

x-watch-cmake-root: &watch-cmake-root
  path: ./CMakeLists.txt
  action: sync+restart
  target: /src/CMakeLists.txt

x-watch-cmake-cogip: &watch-cmake-cogip
  path: ./cogip/CMakeLists.txt
  action: sync+restart
  target: /src/cogip/CMakeLists.txt

x-watch-all: &watch-all
  develop:
    watch:
      - *watch-pyproject
      - *watch-cpp
      - *watch-cmake-root
      - *watch-cmake-cogip
      - *watch-python

x-build-console: &build-console
  build:
    context: .
    args:
      UID: ${UID:-1000}
      GID: ${GID:-1000}
    target: cogip-console

x-build-firmware: &build-firmware
  build:
    context: .
    target: cogip-firmware
  working_dir: /cogip-tools/submodules/mcu-firmware
  volumes:
    - *vol-run
    - *vol-dev
    - *vol-vscode
    - ".:/cogip-tools"
  command:
    - /bin/sh
    - -x
    - -c
    - make -C applications/$${FIRMWARE_APP} -j$$(nproc) BOARD=$${FIRMWARE_BOARD}

x-firmware: &firmware
  <<: *build-firmware
  network_mode: "host"
  environment: &env-firmware
    FIRMWARE_BOARD: ${FIRMWARE_BOARD:-cogip-native}
  stdin_open: true
  tty: true
  command:
    - /bin/sh
    - -x
    - -c
    - applications/$${FIRMWARE_APP}/bin/$${FIRMWARE_BOARD}/$${FIRMWARE_APP}.elf --can 0:vcan$${ROBOT_ID} $${FIRMWARE_OPTIONS}
  stop_signal: SIGKILL

x-robot: &robot
  <<: [*build-console, *volumes-common, *extra-hosts-common, *watch-all]
  network_mode: "host"
  ipc: host
  privileged: true
  environment: &env-robot
    UID: ${UID:-1000}
    GID: ${GID:-1000}
    DISPLAY:
    XDG_RUNTIME_DIR:
    SERVER_DEBUG:
    SERVER_RELOAD:
    SERVER_DASHBOARD_UPDATE_INTERVAL:
    PLANNER_DEBUG:
    PLANNER_RELOAD:
    PLANNER_ROBOT_WIDTH:
    PLANNER_ROBOT_LENGTH:
    PLANNER_OBSTACLE_RADIUS:
    PLANNER_OBSTACLE_BB_MARGIN:
    PLANNER_OBSTACLE_BB_VERTICES:
    PLANNER_OBSTACLE_UPDATER_INTERVAL:
    PLANNER_PATH_REFRESH_INTERVAL:
    PLANNER_BYPASS_DETECTOR:
    PLANNER_SCSERVOS_PORT:
    PLANNER_SCSERVOS_BAUD_RATE:
    PLANNER_DISABLE_FIXED_OBSTACLES:
    PLANNER_TABLE:
    PLANNER_STRATEGY:
    COPILOT_RELOAD:
    COPILOT_DEBUG:
    DETECTOR_RELOAD:
    DETECTOR_DEBUG:
    DETECTOR_LIDAR_PORT:
    DETECTOR_MIN_DISTANCE:
    DETECTOR_MAX_DISTANCE:
    DETECTOR_MIN_INTENSITY:
    DETECTOR_REFRESH_INTERVAL:
    DETECTOR_SENSOR_DELAY:
    DETECTOR_CLUSTER_MIN_SAMPLES:
    DETECTOR_CLUSTER_EPS:
    DETECTOR_WEB:
  command:
    - /bin/sh
    - -x
    - -c
    - |
      USERNAME=`getent passwd $${UID} | cut -d: -f1` || exit 1
      uv sync --reinstall-package cogip-tools -C build-dir=/src/build/$${ROBOT_ID}
      su $${USERNAME} -c "uv run cogip-server" &
      wait-for-it -t 0 localhost:809$${ROBOT_ID}
      su $${USERNAME} -c "uv run cogip-planner" &
      su $${USERNAME} -c "uv run cogip-copilot -b 500000 -B 1000000" &
      su $${USERNAME} -c "uv run cogip-detector" &
      su $${USERNAME} -c "uv run cogip-dashboard" &
      sleep infinity
  stop_signal: SIGKILL

x-monitor: &monitor
  << : [*build-console, *volumes-common, *extra-hosts-common]
  network_mode: "host"
  ipc: host
  environment: &env-monitor
    UID: ${UID:-1000}
    GID: ${GID:-1000}
    DISPLAY:
    QTWEBENGINE_DISABLE_SANDBOX: 1
    XDG_RUNTIME_DIR:
  command:
    - /bin/sh
    - -x
    - -c
    - |
      wait-for-it -t 0 $${COGIP_SOCKETIO_SERVER_HOST}:$${COGIP_SOCKETIO_SERVER_PORT}
      gosu $${UID}:$${GID} uv run cogip-monitor http://$${COGIP_SOCKETIO_SERVER_HOST}:$${COGIP_SOCKETIO_SERVER_PORT} &
      sleep infinity
  working_dir: /src
  stop_signal: SIGKILL

services:
  beacon:
    <<: [*build-console, *extra-hosts-common]
    hostname: beacon
    network_mode: "host"
    ipc: host
    environment:
      ROBOT_ID: 0
      SERVER_BEACON_MAX_ROBOTS: 5
      SERVER_BEACON_RELOAD:
      SERVER_BEACON_DEBUG:
    volumes:
      - *vol-vscode
      - "./records:/var/tmp/cogip"
    develop:
      watch:
        - *watch-pyproject
        - *watch-python
    command:
      - /bin/sh
      - -x
      - -c
      - |
        gosu $${UID}:$${GID} uv run cogip-server-beacon &
        gosu $${UID}:$${GID} uv run cogip-dashboard &
        sleep infinity
    profiles:
      - beacon
    stop_signal: SIGKILL

  make-firmware-motion-control:
    <<: *build-firmware
    environment:
      << : *env-firmware
      FIRMWARE_APP: cup2024-robot-motion-control
    command:
      - /bin/sh
      - -x
      - -c
      - make -C applications/$${FIRMWARE_APP} -j$$(nproc) BOARD=$${FIRMWARE_BOARD}
    profiles:
      - robot1

  make-firmware-pami:
    <<: *build-firmware
    environment: &env-firmware-pami
      << : *env-firmware
      FIRMWARE_APP: cup2024-robot-motion-control # Use robot1 firmware until PAMI firmware is updated to use CAN
    command:
      - /bin/sh
      - -x
      - -c
      - make -C applications/$${FIRMWARE_APP} -j$$(nproc) BOARD=$${FIRMWARE_BOARD}
    profiles:
      - robot2
      - robot3
      - robot4
      - robot5

  firmware1-motion-control:
    << : *firmware
    hostname: firmware1-motion-control
    environment:
      << : *env-firmware
      ROBOT_ID: 1
      FIRMWARE_APP: cup2024-robot-motion-control
    depends_on:
      make-firmware-motion-control:
        condition: service_completed_successfully
    profiles:
      - robot1

  firmware2:
    << : *firmware
    hostname: firmware2
    environment:
      << : *env-firmware-pami
      ROBOT_ID: 2
    depends_on:
      make-firmware-pami:
        condition: service_completed_successfully
    profiles:
      - robot2

  firmware3:
    << : *firmware
    hostname: firmware3
    environment:
      << : *env-firmware-pami
      ROBOT_ID: 3
    depends_on:
      make-firmware-pami:
        condition: service_completed_successfully
    profiles:
      - robot3

  firmware4:
    << : *firmware
    hostname: firmware4
    environment:
      << : *env-firmware-pami
      ROBOT_ID: 4
    depends_on:
      make-firmware-pami:
        condition: service_completed_successfully
    profiles:
      - robot4

  firmware5:
    << : *firmware
    hostname: firmware5
    environment:
      << : *env-firmware-pami
      ROBOT_ID: 5
    depends_on:
      make-firmware-pami:
        condition: service_completed_successfully
    profiles:
      - robot5

  robot1:
    << : *robot
    hostname: robot1
    environment:
      << : *env-robot
      ROBOT_ID: 1
      COPILOT_CAN_CHANNEL: vcan1
    profiles:
      - robot1

  robot2:
    << : *robot
    hostname: robot2
    environment:
      << : *env-robot
      ROBOT_ID: 2
      COPILOT_CAN_CHANNEL: vcan2
    profiles:
      - robot2

  robot3:
    << : *robot
    hostname: robot3
    environment:
      << : *env-robot
      ROBOT_ID: 3
      COPILOT_CAN_CHANNEL: vcan3
    profiles:
      - robot3

  robot4:
    << : *robot
    hostname: robot4
    environment:
      << : *env-robot
      ROBOT_ID: 4
      COPILOT_CAN_CHANNEL: vcan4
    profiles:
      - robot4

  robot5:
    << : *robot
    hostname: robot5
    environment:
      << : *env-robot
      ROBOT_ID: 5
      COPILOT_CAN_CHANNEL: vcan5
    profiles:
      - robot5

  monitor1:
    << : *monitor
    hostname: monitor1
    environment:
      << : *env-monitor
      COGIP_SOCKETIO_SERVER_HOST: robot1
      COGIP_SOCKETIO_SERVER_PORT: 8091
      COGIP_SOCKETIO_SERVER_URL: http://robot1:8091
    depends_on:
      - robot1
    profiles:
      - monitor1

  monitor2:
    << : *monitor
    hostname: monitor2
    environment:
      << : *env-monitor
      COGIP_SOCKETIO_SERVER_HOST: robot2
      COGIP_SOCKETIO_SERVER_PORT: 8092
      COGIP_SOCKETIO_SERVER_URL: http://robot2:8092
    depends_on:
      - robot2
    profiles:
      - monitor2

  monitor3:
    << : *monitor
    hostname: monitor2
    environment:
      << : *env-monitor
      COGIP_SOCKETIO_SERVER_HOST: robot3
      COGIP_SOCKETIO_SERVER_PORT: 8093
      COGIP_SOCKETIO_SERVER_URL: http://robot3:8093
    depends_on:
      - robot3
    profiles:
      - monitor3

  monitor4:
    << : *monitor
    hostname: monitor4
    environment:
      << : *env-monitor
      COGIP_SOCKETIO_SERVER_HOST: robot4
      COGIP_SOCKETIO_SERVER_PORT: 8094
      COGIP_SOCKETIO_SERVER_URL: http://robot4:8094
    depends_on:
      - robot4
    profiles:
      - monitor4

  monitor5:
    << : *monitor
    hostname: monitor5
    environment:
      << : *env-monitor
      COGIP_SOCKETIO_SERVER_HOST: robot5
      COGIP_SOCKETIO_SERVER_PORT: 8095
      COGIP_SOCKETIO_SERVER_URL: http://robot5:8095
    depends_on:
      - robot5
    profiles:
      - monitor5

  build_wheel:
    build:
      context: .
      target: build_wheel
    image: cogip/cogip-tools:build-wheel-1
    platform: "linux/arm64"
    command:
      - /bin/sh
      - -x
      - -e
      - -c
      - |
        uv build --wheel -C build-dir=/src/build/wheel
        chown ${UID:-1000}:${GID:-1000} dist/cogip_tools-1.0.0-cp312-abi3-linux_aarch64.whl
    volumes:
      - "./cogip:/src/cogip"
      - "./.python-version:/src/.python-version"
      - "./pyproject.toml:/src/pyproject.toml"
      - "./CMakeLists.txt:/src/CMakeLists.txt"
      - "./uv.lock:/src/uv.lock"
      - "./dist:/src/dist"
      - "./LICENSE:/src/LICENSE"
      - "./.gitignore:/src/.gitignore"
      - "build_cache:/src/build/wheel"
    profiles:
      - build_wheel

volumes:
  vscode:
  run:
  build_cache:
